/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  FoodTraceability,
  FoodTraceabilityInterface,
} from "../FoodTraceability";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "productId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "origin",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "productionDate",
        type: "string",
      },
    ],
    name: "ProductAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_origin",
        type: "string",
      },
      {
        internalType: "string",
        name: "_productionDate",
        type: "string",
      },
      {
        internalType: "string",
        name: "_farmingProcess",
        type: "string",
      },
      {
        internalType: "string",
        name: "_transportation",
        type: "string",
      },
      {
        internalType: "string",
        name: "_storageInfo",
        type: "string",
      },
      {
        internalType: "string",
        name: "_salesInfo",
        type: "string",
      },
    ],
    name: "addProduct",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_productId",
        type: "uint256",
      },
    ],
    name: "getProduct",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProductIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "productCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "productIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "products",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "origin",
        type: "string",
      },
      {
        internalType: "string",
        name: "productionDate",
        type: "string",
      },
      {
        internalType: "string",
        name: "farmingProcess",
        type: "string",
      },
      {
        internalType: "string",
        name: "transportation",
        type: "string",
      },
      {
        internalType: "string",
        name: "storageInfo",
        type: "string",
      },
      {
        internalType: "string",
        name: "salesInfo",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506118b58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806347428e7b1461006757806367a6377a146100855780637acc0b20146100b5578063b9db15b4146100eb578063cb51bba914610121578063e0f6ef8714610151575b600080fd5b61006f61016f565b60405161007c9190610f78565b60405180910390f35b61009f600480360381019061009a91906110f4565b6101c7565b6040516100ac9190611269565b60405180910390f35b6100cf60048036038101906100ca91906112b0565b6103fe565b6040516100e2979695949392919061135c565b60405180910390f35b610105600480360381019061010091906112b0565b6107f8565b604051610118979695949392919061135c565b60405180910390f35b61013b600480360381019061013691906112b0565b610c5f565b6040516101489190611269565b60405180910390f35b610159610c83565b6040516101669190611269565b60405180910390f35b606060028054806020026020016040519081016040528092919081815260200182805480156101bd57602002820191906000526020600020905b8154815260200190600101908083116101a9575b5050505050905090565b600061020a6040518060400160405280601681526020017f42617420646175207468656d2073616e207068616d3a00000000000000000000815250898989610c89565b6001600081548092919061021d9061142b565b91905055506102636040518060400160405280600c81526020017f53616e207068616d2049443a0000000000000000000000000000000000000000815250600154610d2b565b6040518060e0016040528089815260200188815260200187815260200186815260200185815260200184815260200183815250600080600154815260200190815260200160002060008201518160000190816102bf919061167f565b5060208201518160010190816102d5919061167f565b5060408201518160020190816102eb919061167f565b506060820151816003019081610301919061167f565b506080820151816004019081610317919061167f565b5060a082015181600501908161032d919061167f565b5060c0820151816006019081610343919061167f565b50905050600260015490806001815401808255809150506001900390600052602060002001600090919091909150556001547f2ad97e35e5231a127d0d7b6cd0aa552ec47d312eff0ef74961fb06c5ae9268848989896040516103a893929190611751565b60405180910390a26103ee6040518060400160405280601c81526020017f4461207468656d2073616e207068616d207468616e6820636f6e672100000000815250610dc7565b6001549050979650505050505050565b6000602052806000526040600020600091509050806000018054610421906114a2565b80601f016020809104026020016040519081016040528092919081815260200182805461044d906114a2565b801561049a5780601f1061046f5761010080835404028352916020019161049a565b820191906000526020600020905b81548152906001019060200180831161047d57829003601f168201915b5050505050908060010180546104af906114a2565b80601f01602080910402602001604051908101604052809291908181526020018280546104db906114a2565b80156105285780601f106104fd57610100808354040283529160200191610528565b820191906000526020600020905b81548152906001019060200180831161050b57829003601f168201915b50505050509080600201805461053d906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610569906114a2565b80156105b65780601f1061058b576101008083540402835291602001916105b6565b820191906000526020600020905b81548152906001019060200180831161059957829003601f168201915b5050505050908060030180546105cb906114a2565b80601f01602080910402602001604051908101604052809291908181526020018280546105f7906114a2565b80156106445780601f1061061957610100808354040283529160200191610644565b820191906000526020600020905b81548152906001019060200180831161062757829003601f168201915b505050505090806004018054610659906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610685906114a2565b80156106d25780601f106106a7576101008083540402835291602001916106d2565b820191906000526020600020905b8154815290600101906020018083116106b557829003601f168201915b5050505050908060050180546106e7906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610713906114a2565b80156107605780601f1061073557610100808354040283529160200191610760565b820191906000526020600020905b81548152906001019060200180831161074357829003601f168201915b505050505090806006018054610775906114a2565b80601f01602080910402602001604051908101604052809291908181526020018280546107a1906114a2565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b5050505050905087565b606080606080606080606060008060008a81526020019081526020016000206040518060e0016040529081600082018054610832906114a2565b80601f016020809104026020016040519081016040528092919081815260200182805461085e906114a2565b80156108ab5780601f10610880576101008083540402835291602001916108ab565b820191906000526020600020905b81548152906001019060200180831161088e57829003601f168201915b505050505081526020016001820180546108c4906114a2565b80601f01602080910402602001604051908101604052809291908181526020018280546108f0906114a2565b801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b50505050508152602001600282018054610956906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610982906114a2565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b505050505081526020016003820180546109e8906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a14906114a2565b8015610a615780601f10610a3657610100808354040283529160200191610a61565b820191906000526020600020905b815481529060010190602001808311610a4457829003601f168201915b50505050508152602001600482018054610a7a906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa6906114a2565b8015610af35780601f10610ac857610100808354040283529160200191610af3565b820191906000526020600020905b815481529060010190602001808311610ad657829003601f168201915b50505050508152602001600582018054610b0c906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b38906114a2565b8015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b50505050508152602001600682018054610b9e906114a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bca906114a2565b8015610c175780601f10610bec57610100808354040283529160200191610c17565b820191906000526020600020905b815481529060010190602001808311610bfa57829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b60028181548110610c6f57600080fd5b906000526020600020016000915090505481565b60015481565b610d2584848484604051602401610ca3949392919061179d565b6040516020818303038152906040527fde68f20a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e60565b50505050565b610dc38282604051602401610d419291906117fe565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e60565b5050565b610e5d81604051602401610ddb919061182e565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e60565b50565b610e7781610e6f610e7a610e9b565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610ea6819050919050565b610eae611850565b565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610eef81610edc565b82525050565b6000610f018383610ee6565b60208301905092915050565b6000602082019050919050565b6000610f2582610eb0565b610f2f8185610ebb565b9350610f3a83610ecc565b8060005b83811015610f6b578151610f528882610ef5565b9750610f5d83610f0d565b925050600181019050610f3e565b5085935050505092915050565b60006020820190508181036000830152610f928184610f1a565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61100182610fb8565b810181811067ffffffffffffffff821117156110205761101f610fc9565b5b80604052505050565b6000611033610f9a565b905061103f8282610ff8565b919050565b600067ffffffffffffffff82111561105f5761105e610fc9565b5b61106882610fb8565b9050602081019050919050565b82818337600083830152505050565b600061109761109284611044565b611029565b9050828152602081018484840111156110b3576110b2610fb3565b5b6110be848285611075565b509392505050565b600082601f8301126110db576110da610fae565b5b81356110eb848260208601611084565b91505092915050565b600080600080600080600060e0888a03121561111357611112610fa4565b5b600088013567ffffffffffffffff81111561113157611130610fa9565b5b61113d8a828b016110c6565b975050602088013567ffffffffffffffff81111561115e5761115d610fa9565b5b61116a8a828b016110c6565b965050604088013567ffffffffffffffff81111561118b5761118a610fa9565b5b6111978a828b016110c6565b955050606088013567ffffffffffffffff8111156111b8576111b7610fa9565b5b6111c48a828b016110c6565b945050608088013567ffffffffffffffff8111156111e5576111e4610fa9565b5b6111f18a828b016110c6565b93505060a088013567ffffffffffffffff81111561121257611211610fa9565b5b61121e8a828b016110c6565b92505060c088013567ffffffffffffffff81111561123f5761123e610fa9565b5b61124b8a828b016110c6565b91505092959891949750929550565b61126381610edc565b82525050565b600060208201905061127e600083018461125a565b92915050565b61128d81610edc565b811461129857600080fd5b50565b6000813590506112aa81611284565b92915050565b6000602082840312156112c6576112c5610fa4565b5b60006112d48482850161129b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113175780820151818401526020810190506112fc565b60008484015250505050565b600061132e826112dd565b61133881856112e8565b93506113488185602086016112f9565b61135181610fb8565b840191505092915050565b600060e0820190508181036000830152611376818a611323565b9050818103602083015261138a8189611323565b9050818103604083015261139e8188611323565b905081810360608301526113b28187611323565b905081810360808301526113c68186611323565b905081810360a08301526113da8185611323565b905081810360c08301526113ee8184611323565b905098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143682610edc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611468576114676113fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114ba57607f821691505b6020821081036114cd576114cc611473565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826114f8565b61153f86836114f8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061157c61157761157284610edc565b611557565b610edc565b9050919050565b6000819050919050565b61159683611561565b6115aa6115a282611583565b848454611505565b825550505050565b600090565b6115bf6115b2565b6115ca81848461158d565b505050565b5b818110156115ee576115e36000826115b7565b6001810190506115d0565b5050565b601f82111561163357611604816114d3565b61160d846114e8565b8101602085101561161c578190505b611630611628856114e8565b8301826115cf565b50505b505050565b600082821c905092915050565b600061165660001984600802611638565b1980831691505092915050565b600061166f8383611645565b9150826002028217905092915050565b611688826112dd565b67ffffffffffffffff8111156116a1576116a0610fc9565b5b6116ab82546114a2565b6116b68282856115f2565b600060209050601f8311600181146116e957600084156116d7578287015190505b6116e18582611663565b865550611749565b601f1984166116f7866114d3565b60005b8281101561171f578489015182556001820191506020850194506020810190506116fa565b8683101561173c5784890151611738601f891682611645565b8355505b6001600288020188555050505b505050505050565b6000606082019050818103600083015261176b8186611323565b9050818103602083015261177f8185611323565b905081810360408301526117938184611323565b9050949350505050565b600060808201905081810360008301526117b78187611323565b905081810360208301526117cb8186611323565b905081810360408301526117df8185611323565b905081810360608301526117f38184611323565b905095945050505050565b600060408201905081810360008301526118188185611323565b9050611827602083018461125a565b9392505050565b600060208201905081810360008301526118488184611323565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220af8bd1fd1a300ca23f43d097bb7661d15cb31f52e49192be185e592d6ea9938e64736f6c634300081c0033";

type FoodTraceabilityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FoodTraceabilityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FoodTraceability__factory extends ContractFactory {
  constructor(...args: FoodTraceabilityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FoodTraceability & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FoodTraceability__factory {
    return super.connect(runner) as FoodTraceability__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FoodTraceabilityInterface {
    return new Interface(_abi) as FoodTraceabilityInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FoodTraceability {
    return new Contract(address, _abi, runner) as unknown as FoodTraceability;
  }
}
